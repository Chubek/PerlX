perl-program ::= { declaration }
declaration ::= variable-declaration | function-declaration | statement | io-statement

statement ::= expression ';'
           | if-statement
           | while-loop
           | for-loop
           | foreach-loop
           | return-statement
           | print-statement
           | next-statement
           | last-statement
           | redo-statement
	   | given-when-statement

if-statement ::= "if" '(' expression ')' block { "elsif" block } [ "else" block ]

while-loop ::= "while" '(' expression ')' block

for-loop ::= "for" '(' expression ';' expression ';' expression ')' block

foreach-loop ::= "foreach" variable '(' expression ')' block

return-statement ::= "return" expression ';'

next-statement ::= "next" ';'

last-statement ::= "last" ';'

redo-statement ::= "redo" ';'

given-when-statement ::= "given" expression '{' when-blocks '}'

when-blocks ::= { when-block }

when-block ::= "when" value-list  block 

value-list ::= expression { ',' expression }

block ::= '{' { declaration } '}'
io-statement ::= file-open-statement | file-close-statement | read-statement | write-statement | file-binary-mode

file-open-statement ::= "open" file-handle ( '<' | '>' | ">>" | "q<" | "q>" | "q<<" ) filename ';'

file-binary-mode ::= "BINMODE" file-handle ';'

file-close-statement ::= "close" file-handle ';'

read-statement ::= "read" variable ',' file-handle ';'
                | "read" variable ',' expression ';'

write-statement ::= "print" [ file-handle ] expression { ',' expression } ';'
                | "printf" [ file-handle ] string expression { ',' expression } ';'
                | "write" file-handle expression { ',' expression } ';'
                | "say" expression { ',' expression } ';'

file-handle ::= '<' identifier '>' 

expression ::= assignment
           | logical-expression
           | string-equality-expression
           | regex-expression
           | substitution-expression
           | quote-word-expression

assignment ::= variable '=' expression

logical-expression ::= equality-expression { ( "and" | "or" | "not" ) equality-expression }

string-equality-expression ::= relational-expression { ( "eq" | "ne" | "lt" | "le" | "gt" | "ge" ) relational-expression }

regex-expression ::= 'm' delimiter regex-pattern [ 'g' ] [ 'i' ] [ 'm' ]

substitution-expression ::= 's' delimiter regex-pattern delimiter substitution-replacement delimiter [ 'g' ] [ 'i' ] [ 'm' ]

quote-word-expression ::= "qw" '(' word-list ')'

equality-expression ::= relational-expression { ( '==' | "!=" | '<' | "<=" | '>' | ">=" ) relational-expression }

relational-expression ::= additive-expression { ( '+' | '-' ) additive-expression }

additive-expression ::= multiplicative-expression { ( '*' | '/' | '%' ) multiplicative-expression }

multiplicative-expression ::= primary { "**" primary }

primary ::= variable
          | number
          | string
          | regex
          | substitution
          | quote-word
          | '(' expression ')'
          | function-call

quote-word ::= "qw" '(' word-list ')'

word-list ::= string { ',' string }

substitution ::= ( 's' | "tr" | 'y' ) delimiter regex-pattern delimiter substitution-replacement delimiter [ 'g' ] [ 'i' ] [ 'm' ]

substitution-replacement ::= string

function-call ::= function-name '(' argument-list ')'

argument-list ::= expression { ',' expression }

variable ::= identifier

function-name ::= identifier

regex-pattern ::= '/' regex-character { regex-character } '/'
               | 'q' delimiter regex-character { regex-character } delimiter

regex-character ::= any-ASCII-character-except-slash

identifier ::= letter { letter-or-digit }

letter ::= 'a' | 'b' | ... | 'z' | 'A' | 'B' | ... | 'Z' | '_'

letter-or-digit ::= letter | digit

number ::= integer | float

integer ::= { digit }

float ::= integer '.' { digit }

string ::= '"' character { character } '"'
         | "'" character { character } "'"
         | q delimiter character { character } delimiter
         | substitution-replacement

delimiter ::= '!' | '"' | '#' | '%' | '&' | '\'' | '(' | ')' | '{' | '}' | '[' | ']' | '<' | '>'
              | '-' | '+' | '*' | '=' | '?' | ':' | ';' | ',' | '.' | '/' | '\\' | '|' | '^' | '`' | '~'

character ::= any-UNICODE-UTF8-character-except-double-quote

digit ::= '0' | '1' | ... | '9'

