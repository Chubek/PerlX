perl-program ::= { declaration }
declaration ::= variable-declaration | function-declaration | statement

variable-declaration ::= ( "my" | "our" ) variable [ ( '=' | "//=" ) expression ] ';'

function-declaration ::= "sub" function-name '(' parameter-list ')' '{' block '}'

parameter-list ::= variable { ',' variable }

block ::= { statement }

statement ::= expression ';'
           | if-statement
           | while-loop
           | for-loop
           | foreach-loop
           | return-statement
           | print-statement

if-statement ::= "if" '(' expression ')' '{' block '}' ('else' '{' block '}')?

while-loop ::= "while" '(' expression ')' '{' block '}'

for-loop ::= "for" '(' expression ';' expression ';' expression ')' '{' block '}'

foreach-loop ::= "foreach" variable '(' expression ')' '{' block '}'

return-statement ::= "return" expression ';'

print-statement ::= "print" expression ';'
                | "printf" string expression ';'

expression ::= assignment | logical-expression | string-equality-expression | regex-expression | substitution-expression

assignment ::= variable '=' expression

logical-expression ::= equality-expression { ( "and" | "or" | "not" ) equality-expression }

string-equality-expression ::= relational-expression { ( "eq" | "ne" | "lt" | "le" | "gt" | "ge" ) relational-expression }

regex-expression ::= 'm' regex-pattern [ 'g' ] [ 'i' ] [ 'm' ]

substitution-expression ::= 's' regex-pattern substitution-replacement [ 'g' ] [ 'i' ] [ 'm' ]

equality-expression ::= relational-expression { ( '==' | "!=" | '<' | "<=" | '>' | ">=" ) relational-expression }

relational-expression ::= additive-expression { ( '+' | '-' ) additive-expression }

additive-expression ::= multiplicative-expression { ( '*' | '/' | '%' ) multiplicative-expression }

multiplicative-expression ::= primary { "**" primary }

primary ::= variable
          | number
          | string
          | regex
          | substitution
          | quote-word
          | '(' expression ')'
          | function-call

quote-word ::= "qw" '(' word-list ')'

word-list ::= string { ',' string }

substitution ::= ( 's' | "tr" | 'y' ) delimiter regex-pattern delimiter substitution-replacement delimiter [ 'g' ] [ 'i' ] [ 'm' ]

substitution-replacement ::= string

function-call ::= function-name '(' argument-list ')'

argument-list ::= expression { ',' expression }

variable ::= identifier

function-name ::= identifier

regex-pattern ::= '/' regex-character { regex-character } '/'
               | 'q' delimiter regex-character { regex-character } delimiter

regex-character ::= any-ASCII-character-except-slash

identifier ::= letter { letter-or-digit }

letter ::= 'a' | 'b' | ... | 'z' | 'A' | 'B' | ... | 'Z' | '_'

letter-or-digit ::= letter | digit

number ::= integer | float

integer ::= { digit }

float ::= integer '.' { digit }

string ::= '"' character { character } '"'
         | q delimiter character { character } delimiter
         | substitution-replacement

delimiter ::= '!' | '"' | '#' | '%' | '&' | '\'' | '(' | ')' | '{' | '}' | '[' | ']' | '<' | '>'
              | '-' | '+' | '*' | '=' | '?' | ':' | ';' | ',' | '.' | '/' | '\\' | '|' | '^' | '`' | '~'

character ::= any-ASCII-character-except-double-quote

digit ::= '0' | '1' | ... | '9'

